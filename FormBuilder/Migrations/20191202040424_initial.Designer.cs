// <auto-generated />
using System;
using FormBuilder.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FormBuilder.Migrations
{
    [DbContext(typeof(FormBuilderContext))]
    [Migration("20191202040424_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FormBuilder.Model.FormTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompanyName");

                    b.Property<string>("TemplateName");

                    b.HasKey("Id");

                    b.ToTable("FormTemplates");
                });

            modelBuilder.Entity("FormBuilder.Model.Questions", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsScored");

                    b.Property<string>("Question");

                    b.Property<int>("Score");

                    b.Property<int?>("TemplateId");

                    b.HasKey("QuestionId");

                    b.HasIndex("TemplateId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("FormBuilder.Model.Template", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("FormTemplateId");

                    b.HasKey("Id");

                    b.HasIndex("FormTemplateId");

                    b.ToTable("Templates");
                });

            modelBuilder.Entity("FormBuilder.Model.TypeOfResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsMultiResponse");

                    b.Property<bool>("IsScored");

                    b.Property<int?>("QuestionsQuestionId");

                    b.Property<string>("ResponseText");

                    b.Property<string>("ResponseType");

                    b.HasKey("Id");

                    b.HasIndex("QuestionsQuestionId");

                    b.ToTable("TypeOfResponses");
                });

            modelBuilder.Entity("FormBuilder.Model.Questions", b =>
                {
                    b.HasOne("FormBuilder.Model.Template", "Template")
                        .WithMany("Questions")
                        .HasForeignKey("TemplateId");
                });

            modelBuilder.Entity("FormBuilder.Model.Template", b =>
                {
                    b.HasOne("FormBuilder.Model.FormTemplate", "FormTemplate")
                        .WithMany("Templates")
                        .HasForeignKey("FormTemplateId");
                });

            modelBuilder.Entity("FormBuilder.Model.TypeOfResponse", b =>
                {
                    b.HasOne("FormBuilder.Model.Questions", "Questions")
                        .WithMany("Reponses")
                        .HasForeignKey("QuestionsQuestionId");
                });
#pragma warning restore 612, 618
        }
    }
}
